# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mAqMLz_hc9uZy6OJuDiEBNmKP9lS7xT8
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import math


df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/titanic_dataset.csv')
df.head(10)

df.corr()

sns.boxplot(data=df,orient='v')

df.info()

"""**DATA WRANGLING**"""

#Removing unecessary data and null values from data
#isnull() will give True where is null value and False for non_null values

df.isnull()

df.head(10).isnull()

#checking how many columns have how many null values
df.isnull().sum()

#seeing null on heatmap
sns.heatmap(df.isnull(),yticklabels='False')

df.drop('Cabin',axis=1,inplace=True)

df

df.dropna(inplace=True)

sns.heatmap(df.isnull(),yticklabels=False)

df.isnull().sum()

pd.get_dummies(df['Sex'])

pd.get_dummies(df['Sex'],drop_first=True)

Sex = pd.get_dummies(df['Sex'],drop_first=True)

Sex.head(5)

Embarked = pd.get_dummies(df['Embarked'],drop_first=True)

Embarked.head(5)

Pclass = pd.get_dummies(df['Pclass'],drop_first=True)
Pclass.head(5)

df = pd.concat([df,Sex,Embarked,Pclass],axis=1)

df.head(5)

df.drop(['PassengerId','Pclass','Name','Sex','Embarked','Ticket'],axis=1,inplace=True)

"""**TRAINING & TESTING DATASET**"""

df.head(5)



"""**TRAIN DATA**"""

X = df.drop('Survived',axis=1)  #data that are independent
y = df["Survived"]   #data that need to predict

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X, y, test_size=0.3, random_state=1)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()

logmodel.fit(X_train,y_train)

prediction = logmodel.predict(X_test)

from sklearn.metrics import classification_report

classification_report(y_test,prediction)

from sklearn.metrics import confusion_matrix,accuracy_score

confusion_matrix(y_test,prediction)
accuracy_score(y_test,prediction)

